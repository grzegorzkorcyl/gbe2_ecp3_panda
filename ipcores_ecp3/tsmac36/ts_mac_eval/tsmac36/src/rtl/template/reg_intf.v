// ===========================================================================
// Verilog module generated by IPexpress
// Filename: reg_intf.v  
// Copyright 2005 (c) Lattice Semiconductor Corporation. All rights reserved.
// ===========================================================================


//`timescale 1ns/100ps


module reg_intf (
        //----------------------
        // inputs to Reg_intf
        //----------------------
	//
        //************
        // resets 
        //************
        reset_n,
        //************
        // clocks 
        //************
        hclk,
        rxc_clk,
        txc_clk,
        //*******************
        // USI related inputs
	// (User Slave Interface)
        //*******************
        us_wdata,
        us_rdy,
        us_wr,
        us_addr,
        us_size,
	//****************
	// from tst_logic 
	//****************
	rx_error_ri,
	rx_fifo_error_ri,
	tx_disfrm_ri,
	tx_fifo_full_ri,
        //*****************
        //from MAC Stat intf  
        //*****************
	rx_stat_vec,
	rx_stat_en,
	tx_stat_vec,
	tx_stat_en,
        //*****************
        //----------------------------
        // outputs from Reg_intf 
        //----------------------------
	//
        //*****************
        //to tst_logic 
        //*****************
	pkt_add_swap_ri,
	pkt_loop_enb_ri,
	pkt_loop_clksel_ri,
	phy_reset_n_ri,
	tx_sndpaustim_ri,
	tx_sndpausreq_ri,
	tx_fifoctrl_ri,
	rx_fifo_full_ri,
	tx_fifo_empty_ri,
	ignore_next_pkt_ri,
	aff_thrhd,
	afe_thrhd,
        //********************
        // usi related outputs
        //********************
        us_err,
        us_irq,
        us_ack,
        us_rdata );



//---------
// INPUTS
//---------
//************
// resets 
//************
input reset_n;				// system reset
//************
// clocks 
//************
input hclk;
input rxc_clk;
input txc_clk;
//****************
input [1:0] us_size;                    // Transfer size 00-byte
input us_rdy;                           // Active high ready respose from USI
input [7:0] us_wdata;                  // register's input data from usi
input us_wr;                            // write/read enable wr=high, read=low
input [17:0] us_addr;                   // 18 bit address
//***********
// tst_logic 
//***********
input rx_error_ri;
input rx_fifo_error_ri;
input tx_disfrm_ri;
input tx_fifo_full_ri;
//*****************
//from MAC Stat intf  
//*****************
input [31:0] rx_stat_vec;
input rx_stat_en;
input [30:0] tx_stat_vec;
input tx_stat_en;
//*****************
//----------------------------
// outputs from Reg_intf
//----------------------------
//
//*****************
//to tst_logic
//*****************
output pkt_add_swap_ri;
output pkt_loop_enb_ri;
output pkt_loop_clksel_ri;
output phy_reset_n_ri;
output [15:0] tx_sndpaustim_ri;
output tx_sndpausreq_ri;
output tx_fifoctrl_ri;
output rx_fifo_full_ri;
output tx_fifo_empty_ri;
output ignore_next_pkt_ri;
output [8:0] aff_thrhd;
output [8:0] afe_thrhd;
//*************
//usi related
//*************
output us_err;
output us_irq;                          // active high interrupt out to mpu
output us_ack;                          // active high acknowledge for reads and writes
output [7:0] us_rdata;                  // register's output data to usi



//-------------------
// SIGNAL assignments
//-------------------
wire pkt_add_swap_ri;
wire pkt_loop_enb_ri;
wire pkt_loop_clksel_ri;
wire phy_reset_n_ri;
wire [15:0] tx_sndpaustim_ri;
wire tx_sndpausreq_ri;
wire tx_fifoctrl_ri;
wire rx_fifo_full_ri;
wire tx_fifo_empty_ri;
wire ignore_next_pkt_ri;
wire [8:0] aff_thrhd;
wire [8:0] afe_thrhd;
wire unused_ctl_0; // NOT USED
wire unused_ctl_1; // NOT USED
wire unused_ctl_2; // NOT USED
wire unused_ctl_3; // NOT USED
wire unused_ctl_4; // NOT USED

reg us_rdy_f0;			        // Active high ready respose from USI pipelined once
reg us_rdy_f1;			        // Active high ready respose from USI pipelined twice
reg us_rdy_wide;		        // Active high ready respose from USI widened to 2 clks 
reg [7:0] us_wdata_f;			// pipelined register's input data from usi
reg [49:0] we;				// register write enables-used for writes (only 9 used)
reg [49:0] re;				// register read enables-used for reads   
reg [7:0] us_rdata;		        // register's output data to usi
reg us_ack;				// active high acknowledge for reads and writes
reg [2:0] cntl_fsm_st;			// control reg FSM states
reg start_burst;			// Start Burst signal (pulse) - NOT USED
reg ram_rst;			        // reset the RAM signal (pulse) - NOT USED
reg range_err;				// Address Out of Range Error   

wire size_err;				// Data Size Error   
wire us_err;				// USI Error
wire [7:0] verid_reg;			// VERID reg always set to 8'ha0 
wire [1:0]ram_rst_mode;		        // reset RAM mode signal 00 = null, 01 = dc/idle rdy low,
wire us_irq;				// active high interrupt out to mpu


// -----------------------------
// General Registers
// -----------------------------
reg [7:0] tstcntl_reg;			// Test Control Register  
reg [7:0] tstcntl2_reg;			// Test Control Register 2 - NOT USED  
reg [7:0] maccntl_reg;			// MAC control Register  
reg [7:0] paustmrl_reg;			// Pause timer register low byte
reg [7:0] paustmrh_reg;			// Pause timer register high byte
reg [7:0] fifoaftl_reg;			// FIFO Almost full Threshold register low byte 
reg [7:0] fifoafth_reg;			// FIFO Almost full Threshold register high byte 
reg [7:0] fifoaetl_reg;			// FIFO Almost Empty Threshold register low byte 
reg [7:0] fifoaeth_reg;			// FIFO Almost Empty Threshold register high byte 
reg [7:0] rxstatus_reg;			// RX Status Register  
reg [7:0] txstatus_reg;			// TX Status Register  

// -----------------------------
// Statistics Counters Registers
// -----------------------------
reg [15:0] rxpicnt_reg;			// Rx packets ignored counter
reg [15:0] rxlcecnt_reg;		// Rx length check error counter
reg [15:0] rxlfcnt_reg;			// Rx long frames counter
reg [15:0] rxsfcnt_reg;			// Rx short frames counter
reg [15:0] rxipgcnt_reg;		// Rx ipg violations counter
reg [15:0] rxcrccnt_reg;		// Rx crc errors counter
reg [15:0] rxokcnt_reg;			// Rx ok packets counter
reg [15:0] rxcfcnt_reg;			// Rx control frames counter
reg [15:0] rxpfcnt_reg;			// Rx pause frames counter
reg [15:0] rxmfcnt_reg;			// Rx Multicast frames counter
reg [15:0] rxbfcnt_reg;			// Rx broadcast frames counter
reg [15:0] rxvfcnt_reg;			// Rx vlan tagged frames counter

reg [15:0] txufcnt_reg;			// Tx unicast frames counter
reg [15:0] txpfcnt_reg; 		// Tx pause frames counter
reg [15:0] txmfcnt_reg;			// Tx Multicast frames counter
reg [15:0] txbfcnt_reg;			// Tx broadcast frames counter
reg [15:0] txvfcnt_reg;			// Tx vlan tagged frames counter
reg [15:0] txbfccnt_reg;		// Tx bad FCS frames counter
reg [15:0] txjfcnt_reg;			// Tx jumbo frames counter


reg re10_dly;			        // re[10] pipelined once
reg re11_dly;			        // re[11] pipelined once
reg re12_dly;			        // re[12] pipelined once
reg re14_dly;			        // re[14] pipelined once
reg re16_dly;			        // re[16] pipelined once
reg re18_dly;			        // re[18] pipelined once
reg re20_dly;			        // re[20] pipelined once
reg re22_dly;			        // re[22] pipelined once
reg re24_dly;			        // re[24] pipelined once
reg re26_dly;			        // re[26] pipelined once
reg re28_dly;			        // re[28] pipelined once
reg re30_dly;			        // re[30] pipelined once
reg re32_dly;			        // re[32] pipelined once
reg re34_dly;			        // re[34] pipelined once
reg re36_dly;			        // re[36] pipelined once
reg re38_dly;			        // re[38] pipelined once
reg re40_dly;			        // re[40] pipelined once
reg re42_dly;			        // re[42] pipelined once
reg re44_dly;			        // re[44] pipelined once
reg re46_dly;			        // re[46] pipelined once
reg re48_dly;			        // re[48] pipelined once
reg clear_delay;			// Clear the clear on read bit
reg [6:0]  clear_count;			// Counter used to generate clear_delay bit


//--------------------------
// dbus0 related
//--------------------------
wire [7:0] reg0_tdrive0_data;
wire [7:0] reg1_tdrive0_data;
wire [7:0] reg2_tdrive0_data;
wire [7:0] reg3_tdrive0_data;
wire [7:0] reg4_tdrive0_data;
wire [7:0] reg5_tdrive0_data;
wire [7:0] reg6_tdrive0_data;
wire [7:0] reg7_tdrive0_data;
wire [7:0] reg8_tdrive0_data;
wire [7:0] reg9_tdrive0_data;
wire [7:0] reg10_tdrive0_data;
wire [7:0] reg11_tdrive0_data;
wire [7:0] buskeep0_tdrive0_data;
wire  reg0_tdrive0_en;
wire  reg1_tdrive0_en;
wire  reg2_tdrive0_en;
wire  reg3_tdrive0_en;
wire  reg4_tdrive0_en;
wire  reg5_tdrive0_en;
wire  reg6_tdrive0_en;
wire  reg7_tdrive0_en;
wire  reg8_tdrive0_en;
wire  reg9_tdrive0_en;
wire  reg10_tdrive0_en;
wire  reg11_tdrive0_en;
wire  buskeep0_tdrive0_en;
//--------------------------

//--------------------------
// dbus1 related
//--------------------------
wire [7:0] reg12_tdrive1_data;
wire [7:0] reg13_tdrive1_data;
wire [7:0] reg14_tdrive1_data;
wire [7:0] reg15_tdrive1_data;
wire [7:0] reg16_tdrive1_data;
wire [7:0] reg17_tdrive1_data;
wire [7:0] reg18_tdrive1_data;
wire [7:0] reg19_tdrive1_data;
wire [7:0] reg20_tdrive1_data;
wire [7:0] reg21_tdrive1_data;
wire [7:0] reg22_tdrive1_data;
wire [7:0] reg23_tdrive1_data;
wire [7:0] buskeep1_tdrive1_data;
wire  reg12_tdrive1_en;
wire  reg13_tdrive1_en;
wire  reg14_tdrive1_en;
wire  reg15_tdrive1_en;
wire  reg16_tdrive1_en;
wire  reg17_tdrive1_en;
wire  reg18_tdrive1_en;
wire  reg19_tdrive1_en;
wire  reg20_tdrive1_en;
wire  reg21_tdrive1_en;
wire  reg22_tdrive1_en;
wire  reg23_tdrive1_en;
wire  buskeep1_tdrive1_en;
//--------------------------

//--------------------------
// dbus2 related
//--------------------------
wire [7:0] reg24_tdrive2_data;
wire [7:0] reg25_tdrive2_data;
wire [7:0] reg26_tdrive2_data;
wire [7:0] reg27_tdrive2_data;
wire [7:0] reg28_tdrive2_data;
wire [7:0] reg29_tdrive2_data;
wire [7:0] reg30_tdrive2_data;
wire [7:0] reg31_tdrive2_data;
wire [7:0] reg32_tdrive2_data;
wire [7:0] reg33_tdrive2_data;
wire [7:0] reg34_tdrive2_data;
wire [7:0] reg35_tdrive2_data;
wire [7:0] buskeep2_tdrive2_data;
wire  reg24_tdrive2_en;
wire  reg25_tdrive2_en;
wire  reg26_tdrive2_en;
wire  reg27_tdrive2_en;
wire  reg28_tdrive2_en;
wire  reg29_tdrive2_en;
wire  reg30_tdrive2_en;
wire  reg31_tdrive2_en;
wire  reg32_tdrive2_en;
wire  reg33_tdrive2_en;
wire  reg34_tdrive2_en;
wire  reg35_tdrive2_en;
wire  buskeep2_tdrive2_en;
//--------------------------

//--------------------------
// dbus3 related
//--------------------------
wire [7:0] reg36_tdrive3_data;
wire [7:0] reg37_tdrive3_data;
wire [7:0] reg38_tdrive3_data;
wire [7:0] reg39_tdrive3_data;
wire [7:0] reg40_tdrive3_data;
wire [7:0] reg41_tdrive3_data;
wire [7:0] reg42_tdrive3_data;
wire [7:0] reg43_tdrive3_data;
wire [7:0] reg44_tdrive3_data;
wire [7:0] reg45_tdrive3_data;
wire [7:0] reg46_tdrive3_data;
wire [7:0] reg47_tdrive3_data;
wire [7:0] reg48_tdrive3_data;
wire [7:0] reg49_tdrive3_data;
wire [7:0] buskeep3_tdrive3_data;
wire  reg36_tdrive3_en;
wire  reg37_tdrive3_en;
wire  reg38_tdrive3_en;
wire  reg39_tdrive3_en;
wire  reg40_tdrive3_en;
wire  reg41_tdrive3_en;
wire  reg42_tdrive3_en;
wire  reg43_tdrive3_en;
wire  reg44_tdrive3_en;
wire  reg45_tdrive3_en;
wire  reg46_tdrive3_en;
wire  reg47_tdrive3_en;
wire  reg48_tdrive3_en;
wire  reg49_tdrive3_en;
wire  buskeep3_tdrive3_en;
 


wire [7:0] keep0;		// bus keeper values for tdrive0 
wire [7:0] keep1;		// bus keeper values for tdrive1 
wire [7:0] keep2;		// bus keeper values for tdrive2
wire [7:0] keep3;		// bus keeper values for tdrive3
 
wire bkenb0;			// bus keeper enable for tdrive0 
wire bkenb1;			// bus keeper enable for tdrive1 
wire bkenb2;			// bus keeper enable for tdrive2 
wire bkenb3;			// bus keeper enable for tdrive3 

wire [3:0] grpsel;		// group select sigs used by add decoder sel between dbus0-dbus3 

reg [7:0] dbus;		        // register's output data to usi 
tri [7:0] dbus0;                // data bus 0
tri [7:0] dbus1;                // data bus 1
tri [7:0] dbus2;                // data bus 2
tri [7:0] dbus3;                // data bus 3

wire us_clk;			// tied to hclk

// PARAMETERS

parameter [1:0]
        SIZE = 2'b00;		// Size for byte transfers

parameter [7:0]
        VERID = 8'ha2;

parameter [1:0]
	IDLE = 2'b00,		// IDLE State
	DELAY = 2'b01,		// DELAY State
	PULSE1 = 2'b10,		// PULSE1 State
	PULSE2 = 2'b11;		// PULSE2 State


	assign us_clk = hclk;
	assign us_irq = 1'b0;

        assign  size_err = (us_size[1:0] != SIZE) ? 1'b1:1'b0;
        assign  us_err = (size_err || range_err) ? 1'b1:1'b0;


        // -------------------------------------------
        // generate grpsel signals for address decoder
        // -------------------------------------------

        assign grpsel[0] = (re[0] | re[1] | re[2] | re[3] | re[4] | re[5] | re[6] |
                            re[7] | re[8] | re[9] | re[10] | re[11]);

        assign grpsel[1] = (re[12] | re[13] | re[14] | re[15] | re[16] | re[17] | 
                            re[18] | re[19] | re[20] | re[21] | re[22] | re[23]);

        assign grpsel[2] = (re[24] | re[25] | re[26] | re[27] | re[28] | re[29] | 
                            re[30] | re[31] | re[32] | re[33] | re[34] | re[35]);

        assign grpsel[3] = (re[36] | re[37] | re[38] | re[39] | re[40] | re[41] | re[42] |
                            re[43] | re[44] | re[45] | re[46] | re[47] | re[48] | re[49]);

        // set bus keeper signals to high state

        assign keep0 =  8'b11111111;
        assign keep1 =  8'b11111111;
        assign keep2 =  8'b11111111;
        assign keep3 =  8'b11111111;

        // decode bus keeper enable signals

        assign bkenb0 =  !grpsel[0];
        assign bkenb1 =  !grpsel[1];
        assign bkenb2 =  !grpsel[2];
        assign bkenb3 =  !grpsel[3];


        // --------------------------
        // mux selected Register bank
        // --------------------------

        always @(grpsel[3:0] or dbus0 or dbus1 or dbus2 or dbus3)
        begin
           if (grpsel[0]) begin
                dbus <=  dbus0;
           end
           else if (grpsel[1]) begin
                dbus <=  dbus1;
           end
           else if (grpsel[2]) begin
                dbus <=  dbus2;
           end
           else if (grpsel[3]) begin
                dbus <=  dbus3;
           end
           else
                dbus <=  8'hff;
        end
        // --------------------------



	// Latch register output to us_rdata usi port 
	// ---------------------------------------------------------------------------
        always @(posedge us_clk or negedge reset_n) begin
          if (~reset_n) begin
            us_rdata[7:0] <= #1 8'hff;
          end
          else begin
	    if (us_rdy_wide && !us_wr) begin
	      us_rdata[7:0] <= dbus[7:0];
            end
          end
        end // always
	
	// ---------------------------------------------------------------------------



	// ========================================
	// Register outs - wire assignments
	// ========================================
	
	// ---------------------------------------
	// VERID
	// ---------------------------------------
	assign verid_reg = VERID;
	
	// ---------------------------------------
	// TSTCNTL
	// ---------------------------------------
        assign pkt_add_swap_ri = tstcntl_reg[0];
        assign pkt_loop_enb_ri = tstcntl_reg[1];
        assign phy_reset_n_ri  = tstcntl_reg[2];
        assign pkt_loop_clksel_ri = tstcntl_reg[3];

	
	// ---------------------------------------
	// SMCNTL
	// ---------------------------------------
	assign unused_ctl_0 = tstcntl2_reg[0];
	assign unused_ctl_1 = tstcntl2_reg[1];
	assign unused_ctl_2 = tstcntl2_reg[2];
	assign unused_ctl_3 = tstcntl2_reg[3];
	assign unused_ctl_4 = tstcntl2_reg[4];

	// ---------------------------------------
	// MACCNTL
	// ---------------------------------------
	assign tx_sndpausreq_ri = maccntl_reg[0];
	assign tx_fifoctrl_ri = maccntl_reg[1];
	assign rx_fifo_full_ri = maccntl_reg[2];
	assign tx_fifo_empty_ri = maccntl_reg[3];
	assign ignore_next_pkt_ri = maccntl_reg[4];

	// ---------------------------------------
	// PAUSTMRL
	// ---------------------------------------
	assign tx_sndpaustim_ri[0] = paustmrl_reg[0];
	assign tx_sndpaustim_ri[1] = paustmrl_reg[1];
	assign tx_sndpaustim_ri[2] = paustmrl_reg[2];
	assign tx_sndpaustim_ri[3] = paustmrl_reg[3];
	assign tx_sndpaustim_ri[4] = paustmrl_reg[4];
	assign tx_sndpaustim_ri[5] = paustmrl_reg[5];
	assign tx_sndpaustim_ri[6] = paustmrl_reg[6];
	assign tx_sndpaustim_ri[7] = paustmrl_reg[7];
 	
	// ---------------------------------------
	// PAUSTMRH
	// ---------------------------------------
	assign tx_sndpaustim_ri[8] = paustmrh_reg[0];
	assign tx_sndpaustim_ri[9] = paustmrh_reg[1];
	assign tx_sndpaustim_ri[10] = paustmrh_reg[2];
	assign tx_sndpaustim_ri[11] = paustmrh_reg[3];
	assign tx_sndpaustim_ri[12] = paustmrh_reg[4];
	assign tx_sndpaustim_ri[13] = paustmrh_reg[5];
	assign tx_sndpaustim_ri[14] = paustmrh_reg[6];
	assign tx_sndpaustim_ri[15] = paustmrh_reg[7];
 	
	// ---------------------------------------
	// FIFOAFTH and FIFOAETH
	// ---------------------------------------
	assign aff_thrhd[7:0] = fifoaftl_reg[7:0];
	assign aff_thrhd[8] = fifoafth_reg[0];
	assign afe_thrhd[7:0] = fifoaetl_reg[7:0];
	assign afe_thrhd[8] = fifoaeth_reg[0];

	// ---------------------------------------
	// RXSTATUS and TXSTATUS
	// ---------------------------------------
	// RO bits out of reg - see code below
	
	// ---------------------------------------
	// COUNTER REGISTERS
	// ---------------------------------------
	// RO bits out of reg - see code below
	
	// -----------------------------------------
	// *****************************************
	// assign register bits to output TS-drivers
	// -----------------------------------------
	// *****************************************

	//----------------------------------------
	// dbus0 related 
	//----------------------------------------
        assign reg0_tdrive0_data =  verid_reg;
        assign reg0_tdrive0_en =  re[0];

        assign reg1_tdrive0_data =  tstcntl_reg;
        assign reg1_tdrive0_en =  re[1];

        assign reg2_tdrive0_data =  tstcntl2_reg;
        assign reg2_tdrive0_en =  re[2];

        assign reg3_tdrive0_data =  maccntl_reg;
        assign reg3_tdrive0_en =  re[3];

        assign reg4_tdrive0_data =  paustmrl_reg;
        assign reg4_tdrive0_en =  re[4];

        assign reg5_tdrive0_data =  paustmrh_reg;
        assign reg5_tdrive0_en =  re[5];

        assign reg6_tdrive0_data =  fifoaftl_reg;
        assign reg6_tdrive0_en =  re[6];

        assign reg7_tdrive0_data =  fifoafth_reg;
        assign reg7_tdrive0_en =  re[7];

        assign reg8_tdrive0_data =  fifoaetl_reg;
        assign reg8_tdrive0_en =  re[8];

        assign reg9_tdrive0_data =  fifoaeth_reg;
        assign reg9_tdrive0_en =  re[9];

        assign reg10_tdrive0_data =  rxstatus_reg;
        assign reg10_tdrive0_en =  re[10];

        assign reg11_tdrive0_data =  txstatus_reg;
        assign reg11_tdrive0_en =  re[11];

        assign buskeep0_tdrive0_data =  keep0;
        assign buskeep0_tdrive0_en =  bkenb0;
	//----------------------------------------

        //----------------------------------------
        // dbus1 related
        //----------------------------------------
        assign reg12_tdrive1_data =  rxpicnt_reg[7:0];
        assign reg12_tdrive1_en =  re[12];

        assign reg13_tdrive1_data =  rxpicnt_reg[15:8];
        assign reg13_tdrive1_en =  re[13];

        assign reg14_tdrive1_data =  rxlcecnt_reg[7:0];
        assign reg14_tdrive1_en =  re[14];

        assign reg15_tdrive1_data =  rxlcecnt_reg[15:8];
        assign reg15_tdrive1_en =  re[15];

        assign reg16_tdrive1_data =  rxlfcnt_reg[7:0];
        assign reg16_tdrive1_en =  re[16];

        assign reg17_tdrive1_data =  rxlfcnt_reg[15:8];
        assign reg17_tdrive1_en =  re[17];

        assign reg18_tdrive1_data =  rxsfcnt_reg[7:0];
        assign reg18_tdrive1_en =  re[18];

        assign reg19_tdrive1_data =  rxsfcnt_reg[15:8];
        assign reg19_tdrive1_en =  re[19];

        assign reg20_tdrive1_data =  rxipgcnt_reg[7:0];
        assign reg20_tdrive1_en =  re[20];

        assign reg21_tdrive1_data =  rxipgcnt_reg[15:8];
        assign reg21_tdrive1_en =  re[21];

        assign reg22_tdrive1_data =  rxcrccnt_reg[7:0];
        assign reg22_tdrive1_en =  re[22];

        assign reg23_tdrive1_data =  rxcrccnt_reg[15:8];
        assign reg23_tdrive1_en =  re[23];

        assign buskeep1_tdrive1_data =  keep1;
        assign buskeep1_tdrive1_en =  bkenb1;
        //----------------------------------------

        //----------------------------------------
        // dbus2 related
        //----------------------------------------
        assign reg24_tdrive2_data =  rxokcnt_reg[7:0];
        assign reg24_tdrive2_en =  re[24];

        assign reg25_tdrive2_data =  rxokcnt_reg[15:8];
        assign reg25_tdrive2_en =  re[25];

        assign reg26_tdrive2_data =  rxcfcnt_reg[7:0];
        assign reg26_tdrive2_en =  re[26];

        assign reg27_tdrive2_data =  rxcfcnt_reg[15:8];
        assign reg27_tdrive2_en =  re[27];

        assign reg28_tdrive2_data =  rxpfcnt_reg[7:0];
        assign reg28_tdrive2_en =  re[28];

        assign reg29_tdrive2_data =  rxpfcnt_reg[15:8];
        assign reg29_tdrive2_en =  re[29];

        assign reg30_tdrive2_data =  rxmfcnt_reg[7:0];
        assign reg30_tdrive2_en =  re[30];

        assign reg31_tdrive2_data =  rxmfcnt_reg[15:8];
        assign reg31_tdrive2_en =  re[31];

        assign reg32_tdrive2_data =  rxbfcnt_reg[7:0];
        assign reg32_tdrive2_en =  re[32];

        assign reg33_tdrive2_data =  rxbfcnt_reg[15:8];
        assign reg33_tdrive2_en =  re[33];

        assign reg34_tdrive2_data =  rxvfcnt_reg[7:0];
        assign reg34_tdrive2_en =  re[34];

        assign reg35_tdrive2_data =  rxvfcnt_reg[15:8];
        assign reg35_tdrive2_en =  re[35];

        assign buskeep2_tdrive2_data =  keep2;
        assign buskeep2_tdrive2_en =  bkenb2;
        //----------------------------------------


        //----------------------------------------
        // dbus3 related
        //----------------------------------------
        assign reg36_tdrive3_data =  txufcnt_reg[7:0];
        assign reg36_tdrive3_en =  re[36];

        assign reg37_tdrive3_data =  txufcnt_reg[15:8];
        assign reg37_tdrive3_en =  re[37];

        assign reg38_tdrive3_data =  txpfcnt_reg[7:0];
        assign reg38_tdrive3_en =  re[38];

        assign reg39_tdrive3_data =  txpfcnt_reg[15:8];
        assign reg39_tdrive3_en =  re[39];

        assign reg40_tdrive3_data =  txmfcnt_reg[7:0];
        assign reg40_tdrive3_en =  re[40];

        assign reg41_tdrive3_data =  txmfcnt_reg[15:8];
        assign reg41_tdrive3_en =  re[41];

        assign reg42_tdrive3_data =  txbfcnt_reg[7:0];
        assign reg42_tdrive3_en =  re[42];

        assign reg43_tdrive3_data =  txbfcnt_reg[15:8];
        assign reg43_tdrive3_en =  re[43];

        assign reg44_tdrive3_data =  txvfcnt_reg[7:0];
        assign reg44_tdrive3_en =  re[44];

        assign reg45_tdrive3_data =  txvfcnt_reg[15:8];
        assign reg45_tdrive3_en =  re[45];

        assign reg46_tdrive3_data =  txbfccnt_reg[7:0];
        assign reg46_tdrive3_en =  re[46];

        assign reg47_tdrive3_data =  txbfccnt_reg[15:8];
        assign reg47_tdrive3_en =  re[47];

        assign reg48_tdrive3_data =  txjfcnt_reg[7:0];
        assign reg48_tdrive3_en =  re[48];

        assign reg49_tdrive3_data =  txjfcnt_reg[15:8];
        assign reg49_tdrive3_en =  re[49];

        assign buskeep3_tdrive3_data =  keep3;
        assign buskeep3_tdrive3_en =  bkenb3;
        //----------------------------------------



	// instantiate tristate drivers for each register's data Muxing
	// -------------------------------------------------------------
        assign  dbus0 = (reg0_tdrive0_en) ? reg0_tdrive0_data:8'bz;
        assign  dbus0 = (reg1_tdrive0_en) ? reg1_tdrive0_data:8'bz;
        assign  dbus0 = (reg2_tdrive0_en) ? reg2_tdrive0_data:8'bz;
        assign  dbus0 = (reg3_tdrive0_en) ? reg3_tdrive0_data:8'bz;
        assign  dbus0 = (reg4_tdrive0_en) ? reg4_tdrive0_data:8'bz;
        assign  dbus0 = (reg5_tdrive0_en) ? reg5_tdrive0_data:8'bz;
        assign  dbus0 = (reg6_tdrive0_en) ? reg6_tdrive0_data:8'bz;
        assign  dbus0 = (reg7_tdrive0_en) ? reg7_tdrive0_data:8'bz;
        assign  dbus0 = (reg8_tdrive0_en) ? reg8_tdrive0_data:8'bz;
        assign  dbus0 = (reg9_tdrive0_en) ? reg9_tdrive0_data:8'bz;
        assign  dbus0 = (reg10_tdrive0_en) ? reg10_tdrive0_data:8'bz;
        assign  dbus0 = (reg11_tdrive0_en) ? reg11_tdrive0_data:8'bz;
        assign  dbus0 = (buskeep0_tdrive0_en) ? buskeep0_tdrive0_data:8'bz;

        // ----------------------------------------------------------------

        assign  dbus1 = (reg12_tdrive1_en) ? reg12_tdrive1_data:8'bz;
        assign  dbus1 = (reg13_tdrive1_en) ? reg13_tdrive1_data:8'bz;
        assign  dbus1 = (reg14_tdrive1_en) ? reg14_tdrive1_data:8'bz;
        assign  dbus1 = (reg15_tdrive1_en) ? reg15_tdrive1_data:8'bz;
        assign  dbus1 = (reg16_tdrive1_en) ? reg16_tdrive1_data:8'bz;
        assign  dbus1 = (reg17_tdrive1_en) ? reg17_tdrive1_data:8'bz;
        assign  dbus1 = (reg18_tdrive1_en) ? reg18_tdrive1_data:8'bz;
        assign  dbus1 = (reg19_tdrive1_en) ? reg19_tdrive1_data:8'bz;
        assign  dbus1 = (reg20_tdrive1_en) ? reg20_tdrive1_data:8'bz;
        assign  dbus1 = (reg21_tdrive1_en) ? reg21_tdrive1_data:8'bz;
        assign  dbus1 = (reg22_tdrive1_en) ? reg22_tdrive1_data:8'bz;
        assign  dbus1 = (reg23_tdrive1_en) ? reg23_tdrive1_data:8'bz;
        assign  dbus1 = (buskeep1_tdrive1_en) ? buskeep1_tdrive1_data:8'bz;

        // ----------------------------------------------------------------

        assign  dbus2 = (reg24_tdrive2_en) ? reg24_tdrive2_data:8'bz;
        assign  dbus2 = (reg25_tdrive2_en) ? reg25_tdrive2_data:8'bz;
        assign  dbus2 = (reg26_tdrive2_en) ? reg26_tdrive2_data:8'bz;
        assign  dbus2 = (reg27_tdrive2_en) ? reg27_tdrive2_data:8'bz;
        assign  dbus2 = (reg28_tdrive2_en) ? reg28_tdrive2_data:8'bz;
        assign  dbus2 = (reg29_tdrive2_en) ? reg29_tdrive2_data:8'bz;
        assign  dbus2 = (reg30_tdrive2_en) ? reg30_tdrive2_data:8'bz;
        assign  dbus2 = (reg31_tdrive2_en) ? reg31_tdrive2_data:8'bz;
        assign  dbus2 = (reg32_tdrive2_en) ? reg32_tdrive2_data:8'bz;
        assign  dbus2 = (reg33_tdrive2_en) ? reg33_tdrive2_data:8'bz;
        assign  dbus2 = (reg34_tdrive2_en) ? reg34_tdrive2_data:8'bz;
        assign  dbus2 = (reg35_tdrive2_en) ? reg35_tdrive2_data:8'bz;
        assign  dbus2 = (buskeep2_tdrive2_en) ? buskeep2_tdrive2_data:8'bz;

        // ----------------------------------------------------------------

        assign  dbus3 = (reg36_tdrive3_en) ? reg36_tdrive3_data:8'bz;
        assign  dbus3 = (reg37_tdrive3_en) ? reg37_tdrive3_data:8'bz;
        assign  dbus3 = (reg38_tdrive3_en) ? reg38_tdrive3_data:8'bz;
        assign  dbus3 = (reg39_tdrive3_en) ? reg39_tdrive3_data:8'bz;
        assign  dbus3 = (reg40_tdrive3_en) ? reg40_tdrive3_data:8'bz;
        assign  dbus3 = (reg41_tdrive3_en) ? reg41_tdrive3_data:8'bz;
        assign  dbus3 = (reg42_tdrive3_en) ? reg42_tdrive3_data:8'bz;
        assign  dbus3 = (reg43_tdrive3_en) ? reg43_tdrive3_data:8'bz;
        assign  dbus3 = (reg44_tdrive3_en) ? reg44_tdrive3_data:8'bz;
        assign  dbus3 = (reg45_tdrive3_en) ? reg45_tdrive3_data:8'bz;
        assign  dbus3 = (reg46_tdrive3_en) ? reg46_tdrive3_data:8'bz;
        assign  dbus3 = (reg47_tdrive3_en) ? reg47_tdrive3_data:8'bz;
        assign  dbus3 = (reg48_tdrive3_en) ? reg48_tdrive3_data:8'bz;
        assign  dbus3 = (reg49_tdrive3_en) ? reg49_tdrive3_data:8'bz;
        assign  dbus3 = (buskeep3_tdrive3_en) ? buskeep3_tdrive3_data:8'bz;

	// ----------------------------------------------------------------


	// ---------------------------------------------------------------------------
	// Stretch out us_rdy and Generate us_ack  
	// us_ack - is just us_rdy pipelined three times and returned  
	// ---------------------------------------------------------------------------
        always @(posedge us_clk or negedge reset_n) begin
          if (~reset_n) begin
            us_rdy_f0 <= #1 1'b0;
            us_rdy_f1 <= #1 1'b0;
            us_ack <= #1 1'b0;
            us_rdy_wide <= #1 1'b0;
          end
          else begin
            us_rdy_f0 <= #1 us_rdy;
            us_rdy_f1 <= #1 us_rdy_f0;
	    us_rdy_wide <= #1 (us_rdy_f0 | us_rdy_f1);
            us_ack <= #1 us_rdy_f1;
          end
        end // always 
	// ---------------------------------------------------------------------------



  // ---------------------------------------------------------------------------------
  // *********************************************************************************
  // ADDRESS DECODER
  // ---------------------------------------------------------------------------------
  // *********************************************************************************
  always @(us_addr or us_wr or us_rdy_wide)
    begin 

        // default assignment of we, and re signals
        we <= 0;
        re <= 0;
	range_err <= 0;

        if (us_rdy_wide == 1'b1) begin

       	   if (us_addr[17:6] == 12'h200) begin

                case (us_addr[5:0])

                        6'd0 : // VERID
                            begin
                                if (!us_wr)
                                  re[0] <=  1;
                                else 
                                  re[0] <=  0;
                            end
                        6'd1 : // TSTCNTL
                            begin
                                if (us_wr) begin
                                  we[1] <=  1;
                                  re[1] <=  0;
				end
                                else  begin
                                  we[1] <=  0;
                                  re[1] <=  1;
				end
                            end
                        6'd2 : // TSTCNTL2
                            begin
                                if (us_wr) begin
                                  we[2] <=  1;
                                  re[2] <=  0;
				end
                                else  begin
                                  we[2] <=  0;
                                  re[2] <=  1;
				end
                            end
                        6'd3 : // MACCNTL
                            begin
                                if (us_wr) begin
                                  we[3] <=  1;
                                  re[3] <=  0;
				end
                                else  begin
                                  we[3] <=  0;
                                  re[3] <=  1;
				end
                            end
                        6'd4 : // PAUSTMRL
                            begin
                                if (us_wr) begin
                                  we[4] <=  1;
                                  re[4] <=  0;
				end
                                else  begin
                                  we[4] <=  0;
                                  re[4] <=  1;
				end
                            end
                        6'd5 : // PAUSTMRH
                            begin
                                if (us_wr) begin
                                  we[5] <=  1;
                                  re[5] <=  0;
				end
                                else  begin
                                  we[5] <=  0;
                                  re[5] <=  1;
				end
                            end
                        6'd6 : // FIFOAFTL
                            begin
                                if (us_wr) begin
                                  we[6] <=  1;
                                  re[6] <=  0;
				end
                                else  begin
                                  we[6] <=  0;
                                  re[6] <=  1;
				end
                            end
                        6'd7 : // FIFOAFTH
                            begin
                                if (us_wr) begin
                                  we[7] <=  1;
                                  re[7] <=  0;
				end
                                else  begin
                                  we[7] <=  0;
                                  re[7] <=  1;
				end
                            end
                        6'd8 : // FIFOAETL
                            begin
                                if (us_wr) begin
                                  we[8] <=  1;
                                  re[8] <=  0;
				end
                                else  begin
                                  we[8] <=  0;
                                  re[8] <=  1;
				end
                            end
                        6'd9 : // FIFOAETH
                            begin
                                if (us_wr) begin
                                  we[9] <=  1;
                                  re[9] <=  0;
				end
                                else  begin
                                  we[9] <=  0;
                                  re[9] <=  1;
				end
                            end
                        6'd10 : // RXSTATUS
                            begin
                                if (!us_wr) 
                                  re[10] <=  1;
                                else 
                                  re[10] <=  0;
                            end
                        6'd11 : // TXSTATUS 
                            begin
                                if (!us_wr) 
                                  re[11] <=  1;
                                else 
                                  re[11] <=  0;
                            end
                        6'd12 : // RXPICNT_L 
                            begin
                                if (!us_wr) 
                                  re[12] <=  1;
                                else 
                                  re[12] <=  0;
                            end
                        6'd13 : // RXPICNT_H 
                            begin
                                if (!us_wr) 
                                  re[13] <=  1;
                                else 
                                  re[13] <=  0;
                            end
                        6'd14 : // RXLCECNT_L 
                            begin
                                if (!us_wr) 
                                  re[14] <=  1;
                                else 
                                  re[14] <=  0;
                            end
                        6'd15 : // RXLCECNT_H 
                            begin
                                if (!us_wr) 
                                  re[15] <=  1;
                                else 
                                  re[15] <=  0;
                            end
                        6'd16 : // RXLFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[16] <=  1;
                                else 
                                  re[16] <=  0;
                            end
                        6'd17 : // RXLFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[17] <=  1;
                                else 
                                  re[17] <=  0;
                            end
                        6'd18 : // RXSFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[18] <=  1;
                                else 
                                  re[18] <=  0;
                            end
                        6'd19 : // RXSFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[19] <=  1;
                                else 
                                  re[19] <=  0;
                            end
                        6'd20 : // RXIPGFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[20] <=  1;
                                else 
                                  re[20] <=  0;
                            end
                        6'd21 : // RXIPGFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[21] <=  1;
                                else 
                                  re[21] <=  0;
                            end
                        6'd22 : // RXCRCCNT_L 
                            begin
                                if (!us_wr) 
                                  re[22] <=  1;
                                else 
                                  re[22] <=  0;
                            end
                        6'd23 : // RXCRCCNT_H 
                            begin
                                if (!us_wr) 
                                  re[23] <=  1;
                                else 
                                  re[23] <=  0;
                            end
                        6'd24 : // RXOKFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[24] <=  1;
                                else 
                                  re[24] <=  0;
                            end
                        6'd25 : // RXOKFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[25] <=  1;
                                else 
                                  re[25] <=  0;
                            end
                        6'd26 : // RXCFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[26] <=  1;
                                else 
                                  re[26] <=  0;
                            end
                        6'd27 : // RXCFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[27] <=  1;
                                else 
                                  re[27] <=  0;
                            end
                        6'd28 : // RXPFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[28] <=  1;
                                else 
                                  re[28] <=  0;
                            end
                        6'd29 : // RXPFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[29] <=  1;
                                else 
                                  re[29] <=  0;
                            end
                        6'd30 : // RXMFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[30] <=  1;
                                else 
                                  re[30] <=  0;
                            end
                        6'd31 : // RXMFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[31] <=  1;
                                else 
                                  re[31] <=  0;
                            end
                        6'd32 : // RXBFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[32] <=  1;
                                else 
                                  re[32] <=  0;
                            end
                        6'd33 : // RXBFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[33] <=  1;
                                else 
                                  re[33] <=  0;
                            end
                        6'd34 : // RXVFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[34] <=  1;
                                else 
                                  re[34] <=  0;
                            end
                        6'd35 : // RXVFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[35] <=  1;
                                else 
                                  re[35] <=  0;
                            end
                        6'd36 : // TXUFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[36] <=  1;
                                else 
                                  re[36] <=  0;
                            end
                        6'd37 : // TXUFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[37] <=  1;
                                else 
                                  re[37] <=  0;
                            end
                        6'd38 : // TXPFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[38] <=  1;
                                else 
                                  re[38] <=  0;
                            end
                        6'd39 : // TXPFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[39] <=  1;
                                else 
                                  re[39] <=  0;
                            end
                        6'd40 : // TXMFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[40] <=  1;
                                else 
                                  re[40] <=  0;
                            end
                        6'd41 : // TXMFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[41] <=  1;
                                else 
                                  re[41] <=  0;
                            end
                        6'd42 : // TXBFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[42] <=  1;
                                else 
                                  re[42] <=  0;
                            end
                        6'd43 : // TXBFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[43] <=  1;
                                else 
                                  re[43] <=  0;
                            end
                        6'd44 : // TXVFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[44] <=  1;
                                else 
                                  re[44] <=  0;
                            end
                        6'd45 : // TXVFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[45] <=  1;
                                else 
                                  re[45] <=  0;
                            end
                        6'd46 : // TXBFCCNT_L 
                            begin
                                if (!us_wr) 
                                  re[46] <=  1;
                                else 
                                  re[46] <=  0;
                            end
                        6'd47 : // TXBFCCNT_H 
                            begin
                                if (!us_wr) 
                                  re[47] <=  1;
                                else 
                                  re[47] <=  0;
                            end
                        6'd48 : // TXJFCNT_L 
                            begin
                                if (!us_wr) 
                                  re[48] <=  1;
                                else 
                                  re[48] <=  0;
                            end
                        6'd49 : // TXJFCNT_H 
                            begin
                                if (!us_wr) 
                                  re[49] <=  1;
                                else 
                                  re[49] <=  0;
                            end

                        default:
                            begin
                                re <=  0; 
                                we <=  0;
				range_err <= 1'b0;
                            end

                endcase

           end // (us_addr[17:6] == 12'h2000) 


	end // (us_rdy == 1)

        else begin // (us_rdy == 0) 
          we <= 0;
          re <= 0;
        end 

    end //always
  // ---------------------------------------------------------------------------------
  // *********************************************************************************


	// ---------------------------------------------------------------------------
	// Delay re[10] - re[48]  by 2 clks to use for Clear on Read 
	// ---------------------------------------------------------------------------
        always @(posedge us_clk or negedge reset_n) begin
          if (~reset_n) begin
            re10_dly <= #1 1'b0;
            re11_dly <= #1 1'b0;
	    re12_dly <= #1 1'b0;
	    re14_dly <= #1 1'b0;
	    re16_dly <= #1 1'b0;
	    re18_dly <= #1 1'b0;
	    re20_dly <= #1 1'b0;
	    re22_dly <= #1 1'b0;
	    re24_dly <= #1 1'b0;
	    re26_dly <= #1 1'b0;
	    re28_dly <= #1 1'b0;
	    re30_dly <= #1 1'b0;
	    re32_dly <= #1 1'b0;
	    re34_dly <= #1 1'b0;
	    re36_dly <= #1 1'b0;
	    re38_dly <= #1 1'b0;
	    re40_dly <= #1 1'b0;
	    re42_dly <= #1 1'b0;
	    re44_dly <= #1 1'b0;
	    re46_dly <= #1 1'b0;
	    re48_dly <= #1 1'b0;
	    clear_delay <= #1 1'b0;
	    clear_count <= #1 7'b0000000;
          end
          else begin
	    if (us_rdy_wide & !us_wr) begin
	        clear_count <= 127;
	    end else if (clear_count != 0) begin
		clear_count <= clear_count - 1;
	    end

	    if (clear_count == 7'b0000001) begin
	       clear_delay <= 1;
	    end else begin
	       clear_delay <= 0;
            end

            if (re[10]) begin
	       re10_dly <= 1;
	    end else if (clear_delay) begin
	       re10_dly <= 0;
	    end

            if (re[11]) begin
	       re11_dly <= 1;
	    end else if (clear_delay) begin
	       re11_dly <= 0;
	    end

            if (re[12]) begin
	       re12_dly <= 1;
	    end else if (clear_delay) begin
	       re12_dly <= 0;
	    end

            if (re[14]) begin
	       re14_dly <= 1;
	    end else if (clear_delay) begin
	       re14_dly <= 0;
	    end

            if (re[16]) begin
	       re16_dly <= 1;
	    end else if (clear_delay) begin
	       re16_dly <= 0;
	    end

            if (re[18]) begin
	       re18_dly <= 1;
	    end else if (clear_delay) begin
	       re18_dly <= 0;
	    end

            if (re[20]) begin
	       re20_dly <= 1;
	    end else if (clear_delay) begin
	       re20_dly <= 0;
	    end

            if (re[22]) begin
	       re22_dly <= 1;
	    end else if (clear_delay) begin
	       re22_dly <= 0;
	    end

            if (re[24]) begin
	       re24_dly <= 1;
	    end else if (clear_delay) begin
	       re24_dly <= 0;
	    end

            if (re[26]) begin
	       re26_dly <= 1;
	    end else if (clear_delay) begin
	       re26_dly <= 0;
	    end

            if (re[28]) begin
	       re28_dly <= 1;
	    end else if (clear_delay) begin
	       re28_dly <= 0;
	    end

            if (re[30]) begin
	       re30_dly <= 1;
	    end else if (clear_delay) begin
	       re30_dly <= 0;
	    end

            if (re[32]) begin
	       re32_dly <= 1;
	    end else if (clear_delay) begin
	       re32_dly <= 0;
	    end

            if (re[34]) begin
	       re34_dly <= 1;
	    end else if (clear_delay) begin
	       re34_dly <= 0;
	    end

            if (re[36]) begin
	       re36_dly <= 1;
	    end else if (clear_delay) begin
	       re36_dly <= 0;
	    end

            if (re[38]) begin
	       re38_dly <= 1;
	    end else if (clear_delay) begin
	       re38_dly <= 0;
	    end

            if (re[40]) begin
	       re40_dly <= 1;
	    end else if (clear_delay) begin
	       re40_dly <= 0;
	    end

            if (re[42]) begin
	       re42_dly <= 1;
	    end else if (clear_delay) begin
	       re42_dly <= 0;
	    end

            if (re[44]) begin
	       re44_dly <= 1;
	    end else if (clear_delay) begin
	       re44_dly <= 0;
	    end

            if (re[46]) begin
	       re46_dly <= 1;
	    end else if (clear_delay) begin
	       re46_dly <= 0;
	    end

            if (re[48]) begin
	       re48_dly <= 1;
	    end else if (clear_delay) begin
	       re48_dly <= 0;
	    end
          end
        end // always 


  // ---------------------------------------------------------------------------------
  // WRITE TO REGISTERS LOGIC
  // ---------------------------------------------------------------------------------


	// ---------------------------------------------------------------------------
	// PIPELINE us_wdata
	// ---------------------------------------------------------------------------
        always @(posedge us_clk or negedge reset_n) begin
          if (~reset_n) begin
            us_wdata_f[7:0] <= #1 8'h00;
          end
          else begin
            us_wdata_f[7:0] <= #1 us_wdata[7:0];
          end
        end // always 
	// ---------------------------------------------------------------------------

	// ---------------------------------------------------------------------------
	// TSTCNTL REGISTER
	// ---------------------------------------------------------------------------
	// FSM to generate pulses if tstcntl_reg[3] or tstcntl_reg[4] are written to "1" 
	// ---------------------------------------------------------------------------

        always @(posedge us_clk or negedge reset_n) begin
          if (~reset_n) begin
            cntl_fsm_st <= #1 IDLE;
	    start_burst <= #1 1'b0;
	    ram_rst <= #1 1'b0;
          end
          else begin

		case (cntl_fsm_st)

			IDLE:
			     begin
	    			start_burst <= #1 1'b0;
	    			ram_rst <= #1 1'b0;

				if  (we[1] == 1) 
				   cntl_fsm_st <= #1 DELAY;
				else
				   cntl_fsm_st <= #1 IDLE;
			     end
			DELAY:
			     begin
				if  (us_wdata_f[3] == 1) 
				   cntl_fsm_st <= #1 PULSE1;
				else if (us_wdata_f[4] == 1) 
				   cntl_fsm_st <= #1 PULSE2;
			        else
				   cntl_fsm_st <= #1 IDLE;
			     end
			PULSE1:
			     begin
	    			start_burst <= #1 1'b1;
				cntl_fsm_st <= #1 IDLE;
			     end
			PULSE2:
			     begin
	    			ram_rst <= #1 1'b1;
				cntl_fsm_st <= #1 IDLE;
			     end
			default:
			     begin
            			cntl_fsm_st <= #1 IDLE;
	    			start_burst <= #1 1'b0;
	    			ram_rst <= #1 1'b0;
			     end
		endcase 
          end
        end // always 

	// ---------------------------------------------------------------------------
	// Write data into TSTCNTL bits [3:0]
	// ---------------------------------------------------------------------------

        always @(posedge us_clk or negedge reset_n) begin
          if (~reset_n) begin
            tstcntl_reg[7:0] <= #1 8'h00;
          end
          else begin
	    if (we[1] == 1) begin  
            	tstcntl_reg[3:0] <= #1 us_wdata_f[3:0];
            	tstcntl_reg[7:4] <= #1 4'b0000;
            end
          end
        end // always 
	// ---------------------------------------------------------------------------

	// ---------------------------------------------------------------------------
	// Write data into TSTCNTL2 - unused 
	// ---------------------------------------------------------------------------

        always @(posedge us_clk or negedge reset_n) begin
          if (~reset_n) begin
            tstcntl2_reg[7:0] <= #1 8'h00;
          end
          else begin
	   if (we[2] == 1) 
           	tstcntl2_reg[7:0] <= #1 us_wdata_f[7:0];
          end
        end // always 
	// ---------------------------------------------------------------------------

	// ---------------------------------------------------------------------------
	// Write data into MACCNTL 
	// ---------------------------------------------------------------------------

        always @(posedge us_clk or negedge reset_n) begin
          if (~reset_n) begin
            maccntl_reg[7:0] <= #1 8'h00;
          end
          else begin
	   if (we[3] == 1) 
           	maccntl_reg[7:0] <= #1 us_wdata_f[7:0];
          end
        end // always 
	// ---------------------------------------------------------------------------

	// ---------------------------------------------------------------------------
	// Write data into PAUSTMR_L, and PAUSTMR_H 
	// ---------------------------------------------------------------------------

        always @(posedge us_clk or negedge reset_n) begin
          if (~reset_n) begin
            paustmrl_reg[7:0] <= #1 8'h00;
            paustmrh_reg[7:0] <= #1 8'h00;
          end
          else begin
	   if (we[4] == 1) 
           	paustmrl_reg[7:0] <= #1 us_wdata_f[7:0];
	   if (we[5] == 1) 
           	paustmrh_reg[7:0] <= #1 us_wdata_f[7:0];
          end
        end // always 
	// ---------------------------------------------------------------------------

	// ---------------------------------------------------------------------------
	// Write data into FIFOAFTL, and FIFOAFTH 
	// ---------------------------------------------------------------------------

        always @(posedge us_clk or negedge reset_n) begin
          if (~reset_n) begin
            fifoaftl_reg[7:0] <= #1 8'hc1;
            fifoafth_reg[7:0] <= #1 8'h01;
          end
          else begin
	   if (we[6] == 1) 
           	fifoaftl_reg[7:0] <= #1 us_wdata_f[7:0];
	   if (we[7] == 1) 
           	fifoafth_reg[7:0] <= #1 us_wdata_f[7:0];
          end
        end // always 
	// ---------------------------------------------------------------------------

	// ---------------------------------------------------------------------------
	// Write data into FIFOAETL, and FIFOAETH 
	// ---------------------------------------------------------------------------

        always @(posedge us_clk or negedge reset_n) begin
          if (~reset_n) begin
            fifoaetl_reg[7:0] <= #1 8'h05;
            fifoaeth_reg[7:0] <= #1 8'h00;
          end
          else begin
	   if (we[8] == 1) 
           	fifoaetl_reg[7:0] <= #1 us_wdata_f[7:0];
	   if (we[9] == 1) 
           	fifoaeth_reg[7:0] <= #1 us_wdata_f[7:0];
          end
        end // always 
	// ---------------------------------------------------------------------------

	// ---------------------------------------------------------------------------
	// Write to RXSTATUS Reg from system side 
	// ---------------------------------------------------------------------------
        always @(posedge rxc_clk or negedge reset_n) begin
          if (~reset_n) begin
	    rxstatus_reg[7:0] <= #1 8'h00;
          end
          else begin
	  	if (re10_dly & !us_rdy_wide)
	     	  rxstatus_reg[7:0] <= #1 8'h00;
	   	else begin
		  if (rx_error_ri == 1'b1)
	     	    rxstatus_reg[0] <= #1 1'b1;
		  if (rx_fifo_error_ri == 1'b1)
	     	    rxstatus_reg[1] <= #1 1'b1;
                end 
          end 
        end // always 

	// ---------------------------------------------------------------------------
	// Write to TXSTATUS Reg from system side 
	// ---------------------------------------------------------------------------
        always @(posedge txc_clk or negedge reset_n) begin
          if (~reset_n) begin
	    txstatus_reg[7:0] <= #1 8'h00;
          end
          else begin
	  	if (re11_dly & !us_rdy_wide)
	     	  txstatus_reg[7:0] <= #1 8'h00;
	   	else begin
		  if (tx_disfrm_ri == 1'b1)
	     	    txstatus_reg[0] <= #1 1'b1;
		  if (tx_fifo_full_ri == 1'b1)
	     	    txstatus_reg[1] <= #1 1'b1;
                end 
          end 
        end // always 

	// ---------------------------------------------------------------------------
	// RX STAT COUNTERS 
	// ---------------------------------------------------------------------------
        always @(posedge rxc_clk or negedge reset_n) begin
          if (~reset_n) begin
	    rxpicnt_reg <= #1 16'h0000;
	    rxlcecnt_reg <= #1 16'h0000;
	    rxlfcnt_reg <= #1 16'h0000;
	    rxsfcnt_reg <= #1 16'h0000;	
	    rxipgcnt_reg <= #1 16'h0000;
	    rxcrccnt_reg <= #1 16'h0000;
	    rxokcnt_reg <= #1 16'h0000;
	    rxcfcnt_reg <= #1 16'h0000;
	    rxpfcnt_reg <= #1 16'h0000;
	    rxmfcnt_reg <= #1 16'h0000;
	    rxbfcnt_reg <= #1 16'h0000;
	    rxvfcnt_reg <= #1 16'h0000;
          end
          else begin
	  	if (re12_dly & !us_rdy_wide)
	    	  rxpicnt_reg <= #1 16'h0000;
	  	if (re14_dly & !us_rdy_wide)
	    	  rxlcecnt_reg <= #1 16'h0000;
	  	if (re16_dly & !us_rdy_wide)
	    	  rxlfcnt_reg <= #1 16'h0000;
	  	if (re18_dly & !us_rdy_wide)
	    	  rxsfcnt_reg <= #1 16'h0000;	
	  	if (re20_dly & !us_rdy_wide)
	    	  rxipgcnt_reg <= #1 16'h0000;
	  	if (re22_dly & !us_rdy_wide)
	    	  rxcrccnt_reg <= #1 16'h0000;
	  	if (re24_dly & !us_rdy_wide)
	    	  rxokcnt_reg <= #1 16'h0000;
	  	if (re26_dly & !us_rdy_wide)
	    	  rxcfcnt_reg <= #1 16'h0000;
	  	if (re28_dly & !us_rdy_wide)
	    	  rxpfcnt_reg <= #1 16'h0000;
	  	if (re30_dly & !us_rdy_wide)
	    	  rxmfcnt_reg <= #1 16'h0000;
	  	if (re32_dly & !us_rdy_wide)
	    	  rxbfcnt_reg <= #1 16'h0000;
	  	if (re34_dly & !us_rdy_wide)
	    	  rxvfcnt_reg <= #1 16'h0000;
	   	else begin
		  if (rx_stat_en == 1'b1) begin
		    if (rx_stat_vec[26] == 1'b1)
	    	      rxpicnt_reg <= #1 rxpicnt_reg + 1;
		    if (rx_stat_vec[24] == 1'b1)
	     	      rxlcecnt_reg <= #1 rxlcecnt_reg + 1;
		    if (rx_stat_vec[31] == 1'b1)
	    	      rxlfcnt_reg <= #1 rxlfcnt_reg + 1;
		    if (rx_stat_vec[30] == 1'b1)
	    	      rxsfcnt_reg <= #1 rxsfcnt_reg + 1;	
		    if (rx_stat_vec[29] == 1'b1)
	    	      rxipgcnt_reg <= #1 rxipgcnt_reg + 1;
		    if (rx_stat_vec[25] == 1'b1)
	    	      rxcrccnt_reg <= #1 rxcrccnt_reg + 1;
		    if (rx_stat_vec[23] == 1'b1)
	    	      rxokcnt_reg <= #1 rxokcnt_reg + 1;
		    if (rx_stat_vec[18] == 1'b1)
	    	      rxcfcnt_reg <= #1 rxcfcnt_reg + 1;
		    if (rx_stat_vec[17] == 1'b1)
	    	      rxpfcnt_reg <= #1 rxpfcnt_reg + 1;
		    if (rx_stat_vec[22] == 1'b1)
	    	      rxmfcnt_reg <= #1 rxmfcnt_reg + 1;
		    if (rx_stat_vec[21] == 1'b1)
	    	      rxbfcnt_reg <= #1 rxbfcnt_reg + 1;
		    if (rx_stat_vec[16] == 1'b1)
	    	      rxvfcnt_reg <= #1 rxvfcnt_reg + 1;
                  end 
                end 
          end 
        end // always 


	// ---------------------------------------------------------------------------
	// TX STAT COUNTERS 
	// ---------------------------------------------------------------------------
        always @(posedge txc_clk or negedge reset_n) begin
          if (~reset_n) begin
	    txufcnt_reg <= #1 16'h0000;
	    txpfcnt_reg <= #1 16'h0000;
	    txmfcnt_reg <= #1 16'h0000;
	    txbfcnt_reg <= #1 16'h0000;
	    txvfcnt_reg <= #1 16'h0000;
	    txbfccnt_reg <= #1 16'h0000;
	    txjfcnt_reg <= #1 16'h0000;
          end
          else begin
	  	if (re36_dly & !us_rdy_wide)
	    	  txufcnt_reg <= #1 16'h0000;
	  	if (re38_dly & !us_rdy_wide)
	    	  txpfcnt_reg <= #1 16'h0000;
	  	if (re40_dly & !us_rdy_wide)
	    	  txmfcnt_reg <= #1 16'h0000;
	  	if (re42_dly & !us_rdy_wide)
	    	  txbfcnt_reg <= #1 16'h0000;
	  	if (re44_dly & !us_rdy_wide)
	    	  txvfcnt_reg <= #1 16'h0000;
	  	if (re46_dly & !us_rdy_wide)
	    	  txbfccnt_reg <= #1 16'h0000;
	  	if (re48_dly & !us_rdy_wide)
	    	  txjfcnt_reg <= #1 16'h0000;
	   	else begin
		  if (tx_stat_en == 1'b1) begin
		    if (tx_stat_vec[0] == 1'b1)
	    	      txufcnt_reg <= #1 txufcnt_reg + 1;
		    if (tx_stat_vec[6] == 1'b1)
	    	      txpfcnt_reg <= #1 txpfcnt_reg + 1;
		    if (tx_stat_vec[1] == 1'b1)
	    	      txmfcnt_reg <= #1 txmfcnt_reg + 1;
		    if (tx_stat_vec[2] == 1'b1)
	    	      txbfcnt_reg <= #1 txbfcnt_reg + 1;
		    if (tx_stat_vec[7] == 1'b1)
	    	      txvfcnt_reg <= #1 txvfcnt_reg + 1;
		    if (tx_stat_vec[3] == 1'b1)
	    	      txbfccnt_reg <= #1 txbfccnt_reg + 1;
		    if (tx_stat_vec[4] == 1'b1)
	    	      txjfcnt_reg <= #1 txjfcnt_reg + 1;
                  end 
                end 
          end 
        end // always 


endmodule // reg_intf




