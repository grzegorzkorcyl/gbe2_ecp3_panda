// ===========================================================================
// Verilog module generated by IPexpress
// Filename: fifo_2048x9.v  
// Copyright 2012 (c) Lattice Semiconductor Corporation. All rights reserved.
// ===========================================================================

module fifo_2048x9 (
// INPUTS
     wclk,	// write clock for fifo
     wren,	// write select for fifo
     datain,	// 8 data + control for fifo
     reset,	// clear fifo active high
     rclk,	// read clock for fifo
     rden,	// read select for fifo
     aff_thrhd, // 9 bit almost full flag threshold value for fifo
     afe_thrhd, // 9 bit almost full flag threshold value for fifo
     wclk_en,    // RAM write clock enable
     rclk_en,    // RAM read clock enable

// OUTPUTS     
     daout,		// 8 data + control for outputs
     empty,		// empty flag
     almost_full,	//  almost full flag
     almost_empty,	//  almost empty flag
     full		// full flag
   );
parameter pdevice_family = "ECP";

input wclk;		// write clock for fifo
input wren;		// write select for fifo
input reset;		// clear fifo - active low
input rclk;		// read clock for fifo
input rden;		// read select for fifo
input [8:0]	datain;	// 8 data + control for fifo
input [8:0] aff_thrhd;  // 9 bit almost full flag threshold value 
input [8:0] afe_thrhd;  // 9 bit almost empty flag threshold value for output fifo
input wclk_en;
input rclk_en;

output almost_full, almost_empty, full, empty;	
output [8:0]	daout;	// 8 data + control for fifo

// DECLARATIONS
wire [8:0] wr_addr_a;
wire [8:0] wr_addr_b;
wire [8:0] wr_addr_c;
wire [8:0] wr_addr_d;
wire [8:0] rd_addr_a;
wire [8:0] rd_addr_b;
wire [8:0] rd_addr_c;
wire [8:0] rd_addr_d;
wire wr_en_a_clk_en;	// fifo write enable
wire wr_en_b_clk_en;	// fifo write enable
wire wr_en_c_clk_en;	// fifo write enable
wire wr_en_d_clk_en;	// fifo write enable
wire wr_en_a, rd_en_a;	// fifo write enable
wire wr_en_b, rd_en_b;	// fifo write enable
wire wr_en_c, rd_en_c;	// fifo write enable
wire wr_en_d, rd_en_d;	// fifo write enable
wire [8:0] aff_thrhd;
wire [8:0] afe_thrhd;
wire [8:0] ram_da_out_a; // ram_512x9 data output
reg  [8:0] ram_da_out_a_d; // ram_512x9 data output
wire [8:0] ram_da_out_b; // ram_512x9 data output
reg  [8:0] ram_da_out_b_d; // ram_512x9 data output
wire [8:0] ram_da_out_c; // ram_512x9 data output
reg  [8:0] ram_da_out_c_d; // ram_512x9 data output
wire [8:0] ram_da_out_d; // ram_512x9 data output
wire 	   rd_a; // fifo read/write
wire 	   rd_b; // fifo read/write
wire 	   rd_c; // fifo read/write
reg 	   wr_b; // fifo read/write
reg 	   wr_b_d; // fifo read/write
reg 	   wr_c; // fifo read/write
reg 	   wr_c_d; // fifo read/write
reg 	   wr_d; // fifo read/write
reg 	   wr_d_d; // fifo read/write
wire 	   empty_a; // fifo empty
wire 	   empty_b; // fifo empty
wire 	   empty_c; // fifo empty
wire 	   almost_full_b; // fifo full
wire 	   almost_full_c; // fifo full
wire 	   almost_full_d; // fifo full
assign rd_a = ~empty_a & ~almost_full_b;
assign rd_b = ~empty_b & ~almost_full_c;
assign rd_c = ~empty_c & ~almost_full_d;
assign wr_en_a_clk_en = wr_en_a & wclk_en;
assign wr_en_b_clk_en = wr_en_b & rclk_en;
assign wr_en_c_clk_en = wr_en_c & rclk_en;
assign wr_en_d_clk_en = wr_en_d & rclk_en;

wire [8:0]	daout;	// 8 data + control for fifo
assign 	#1 daout[8:0] = ram_da_out_d[8:0];
/* 
 * params SYNC_MODE and RAM_MODE set in level above
 * and passed through.
 */
//parameter SYNC_MODE = "SYNC";// rd/wr clocks same
//parameter RAM_MODE = "REG";  //input reg
parameter SYNC_MODE = "ASYNC";
parameter RAM_MODE = "NOREG";
defparam  ff_ctl_a.SYNC_MODE = SYNC_MODE;
defparam  ff_ctl_a.RAM_MODE = RAM_MODE;
defparam  ff_ctl_b.RAM_MODE = RAM_MODE;
defparam  ff_ctl_c.RAM_MODE = RAM_MODE;
defparam  ff_ctl_d.RAM_MODE = RAM_MODE;

        always @(posedge rclk or negedge reset) begin
          if (~reset) begin
        	wr_b <= 1'b0;
        	wr_b_d <= 1'b0;
        	wr_c <= 1'b0;
        	wr_c_d <= 1'b0;
        	wr_d <= 1'b0;
        	wr_d_d <= 1'b0;
        	ram_da_out_a_d <= 9'b000000000;
        	ram_da_out_b_d <= 9'b000000000;
        	ram_da_out_c_d <= 9'b000000000;
          end
          else begin
		if(rclk_en == 1) begin
	        wr_b <= rd_a;
        	wr_b_d <= wr_b;
        	wr_c <= rd_b;
        	wr_c_d <= wr_c;
        	wr_d <= rd_c;
        	wr_d_d <= wr_d;
        	ram_da_out_a_d <= ram_da_out_a;
        	ram_da_out_b_d <= ram_da_out_b;
        	ram_da_out_c_d <= ram_da_out_c;
          	end // if
          end // else
        end // always

fifo_512_ctl ff_ctl_a(
	// Inputs
	.ckw(wclk),
	.ckw_en(wclk_en),
	.csw(wren),
	.rst_wr(reset),
	.rst_rd(reset),
	.ckr(rclk),
	.ckr_en(rclk_en),
	.csr(rd_a),
	.aff_thrhd(aff_thrhd[8:0]),
	.afe_thrhd(9'b000110000),
	// Outputs
	.wr_adr(wr_addr_a[8:0]),
	.rd_adr(rd_addr_a[8:0]),
	.ff(full),
	.aff(almost_full),
	.afe(almost_empty_a),
	.ef(empty_a),
	.wr_en(wr_en_a),
	.rd_en(rd_en_a),
	.ram_rd_en()
	);

pmi_ram_dp
  #(.pmi_wr_addr_depth(512),
    .pmi_wr_addr_width(9),
    .pmi_wr_data_width(9),
    .pmi_rd_addr_depth(512),
    .pmi_rd_addr_width(9),  
    .pmi_rd_data_width(9), 
    .pmi_regmode("noreg"),
    .pmi_gsr("enable"),
    .pmi_resetmode("sync"),
    .pmi_init_file("none"),
    .pmi_init_file_format("binary"),
    .pmi_family(pdevice_family),           
    .module_type("pmi_ram_dp")
    )
U1_pmi_ram_dp   (.Data(datain[8:0]),
                 .WrAddress(wr_addr_a[8:0]),
                 .RdAddress(rd_addr_a[8:0]),
                 .WrClock(wclk),
                 .RdClock(rclk),
                 .WrClockEn(wr_en_a_clk_en),
                 //.RdClockEn(1'b1),
                 .RdClockEn(rclk_en),
                 .WE(1'b1),
                 .Reset(1'b0),
                 .Q(ram_da_out_a[8:0])
                 );

fifo_512_ctl ff_ctl_b(
	// Inputs
	.ckw(rclk),
	.ckw_en(rclk_en),
	.csw(wr_b_d),
	.rst_wr(reset),
	.rst_rd(reset),
	.ckr(rclk),
	.ckr_en(rclk_en),
	.csr(rd_b),
	.aff_thrhd(9'b111111100),
	.afe_thrhd(9'b000000000),
	// Outputs
	.wr_adr(wr_addr_b[8:0]),
	.rd_adr(rd_addr_b[8:0]),
	.ff(full_b),
	.aff(almost_full_b),
	.afe(almost_empty_b),
	.ef(empty_b),
	.wr_en(wr_en_b),
	.rd_en(rd_en_b),
	.ram_rd_en()
	);

pmi_ram_dp
  #(.pmi_wr_addr_depth(512),
    .pmi_wr_addr_width(9),
    .pmi_wr_data_width(9),
    .pmi_rd_addr_depth(512),
    .pmi_rd_addr_width(9),  
    .pmi_rd_data_width(9), 
    .pmi_regmode("noreg"),
    .pmi_gsr("enable"),
    .pmi_resetmode("sync"),
    .pmi_init_file("none"),
    .pmi_init_file_format("binary"),
    .pmi_family(pdevice_family),           
    .module_type("pmi_ram_dp")
    )
U2_pmi_ram_dp   (.Data(ram_da_out_a_d[8:0]),
                 .WrAddress(wr_addr_b[8:0]),
                 .RdAddress(rd_addr_b[8:0]),
                 .WrClock(rclk),
                 .RdClock(rclk),
                 .WrClockEn(wr_en_b_clk_en),
                 //.RdClockEn(1'b1),
                 .RdClockEn(rclk_en),
                 .WE(1'b1),
                 .Reset(1'b0),
                 .Q(ram_da_out_b[8:0])
                 );


fifo_512_ctl ff_ctl_c(
	// Inputs
	.ckw(rclk),
	.ckw_en(rclk_en),
	.csw(wr_c_d),
	.rst_wr(reset),
	.rst_rd(reset),
	.ckr(rclk),
	.ckr_en(rclk_en),
	.csr(rd_c),
	.aff_thrhd(9'b111111100),
	.afe_thrhd(9'b000000000),
	// Outputs
	.wr_adr(wr_addr_c[8:0]),
	.rd_adr(rd_addr_c[8:0]),
	.ff(full_c),
	.aff(almost_full_c),
	.afe(almost_empty_c),
	.ef(empty_c),
	.wr_en(wr_en_c),
	.rd_en(rd_en_c),
	.ram_rd_en()
	);

pmi_ram_dp
  #(.pmi_wr_addr_depth(512),
    .pmi_wr_addr_width(9),
    .pmi_wr_data_width(9),
    .pmi_rd_addr_depth(512),
    .pmi_rd_addr_width(9),  
    .pmi_rd_data_width(9), 
    .pmi_regmode("noreg"),
    .pmi_gsr("enable"),
    .pmi_resetmode("sync"),
    .pmi_init_file("none"),
    .pmi_init_file_format("binary"),
    .pmi_family(pdevice_family),           
    .module_type("pmi_ram_dp")
    )
U3_pmi_ram_dp   (.Data(ram_da_out_b_d[8:0]),
                 .WrAddress(wr_addr_c[8:0]),
                 .RdAddress(rd_addr_c[8:0]),
                 .WrClock(rclk),
                 .RdClock(rclk),
                 .WrClockEn(wr_en_c_clk_en),
                 //.RdClockEn(1'b1),
                 .RdClockEn(rclk_en),
                 .WE(1'b1),
                 .Reset(1'b0),
                 .Q(ram_da_out_c[8:0])
                 );


fifo_512_ctl ff_ctl_d(
	// Inputs
	.ckw(rclk),
	.ckw_en(rclk_en),
	.csw(wr_d_d),
	.rst_wr(reset),
	.rst_rd(reset),
	.ckr(rclk),
	.ckr_en(rclk_en),
	.csr(rden),
	.aff_thrhd(9'b111111100),
	.afe_thrhd(afe_thrhd[8:0]),
	// Outputs
	.wr_adr(wr_addr_d[8:0]),
	.rd_adr(rd_addr_d[8:0]),
	.ff(full_d),
	.aff(almost_full_d),
	.afe(almost_empty),
	.ef(empty),
	.wr_en(wr_en_d),
	.rd_en(rd_en_d),
	.ram_rd_en()
	);

pmi_ram_dp
  #(.pmi_wr_addr_depth(512),
    .pmi_wr_addr_width(9),
    .pmi_wr_data_width(9),
    .pmi_rd_addr_depth(512),
    .pmi_rd_addr_width(9),  
    .pmi_rd_data_width(9), 
    .pmi_regmode("noreg"),
    .pmi_gsr("enable"),
    .pmi_resetmode("sync"),
    .pmi_init_file("none"),
    .pmi_init_file_format("binary"),
    .pmi_family(pdevice_family),           
    .module_type("pmi_ram_dp")
    )
U4_pmi_ram_dp   (.Data(ram_da_out_c_d[8:0]),
                 .WrAddress(wr_addr_d[8:0]),
                 .RdAddress(rd_addr_d[8:0]),
                 .WrClock(rclk),
                 .RdClock(rclk),
                 .WrClockEn(wr_en_d_clk_en),
                 //.RdClockEn(1'b1),
                 .RdClockEn(rclk_en),
                 .WE(1'b1),
                 .Reset(1'b0),
                 .Q(ram_da_out_d[8:0])
                 );

endmodule    // end of fifo_2048x9
